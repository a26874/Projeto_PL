Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    comentarioMult
    comentarioOne
    entrada
    fim
    funcao

Grammar

Rule 0     S' -> Z
Rule 1     Z -> LstV ;
Rule 2     LstV -> V
Rule 3     LstV -> LstV ; V
Rule 4     V -> id = map ( id , Lista )
Rule 5     V -> id = fold ( id , Lista , numInt )
Rule 6     V -> id = E
Rule 7     V -> id = Lista
Rule 8     Lista -> [ ListIn ]
Rule 9     ListIn -> numInt , ListIn
Rule 10    ListIn -> numInt
Rule 11    Texto -> texto
Rule 12    Texto -> id
Rule 13    Texto -> id [ numInt ]
Rule 14    Texto -> Texto < > Texto
Rule 15    V -> escrever ( Texto )
Rule 16    E -> E + T
Rule 17    E -> E - T
Rule 18    E -> T
Rule 19    T -> T / F
Rule 20    T -> T * F
Rule 21    T -> F
Rule 22    F -> ( E )
Rule 23    F -> numInt
Rule 24    F -> numF
Rule 25    F -> id
Rule 26    F -> id [ numInt ]
Rule 27    F -> aleatorio ( numInt )

Terminals, with rules where they appear

(                    : 4 5 15 22 27
)                    : 4 5 15 22 27
*                    : 20
+                    : 16
,                    : 4 5 5 9
-                    : 17
/                    : 19
;                    : 1 3
<                    : 14
=                    : 4 5 6 7
>                    : 14
[                    : 8 13 26
]                    : 8 13 26
aleatorio            : 27
comentarioMult       : 
comentarioOne        : 
entrada              : 
error                : 
escrever             : 15
fim                  : 
fold                 : 5
funcao               : 
id                   : 4 4 5 5 6 7 12 13 25 26
map                  : 4
numF                 : 24
numInt               : 5 9 10 13 23 26 27
texto                : 11

Nonterminals, with rules where they appear

E                    : 6 16 17 22
F                    : 19 20 21
ListIn               : 8 9
Lista                : 4 5 7
LstV                 : 1 3
T                    : 16 17 18 19 20
Texto                : 14 14 15
V                    : 2 3
Z                    : 0

Parsing method: LALR

state 0

    (0) S' -> . Z
    (1) Z -> . LstV ;
    (2) LstV -> . V
    (3) LstV -> . LstV ; V
    (4) V -> . id = map ( id , Lista )
    (5) V -> . id = fold ( id , Lista , numInt )
    (6) V -> . id = E
    (7) V -> . id = Lista
    (15) V -> . escrever ( Texto )

    id              shift and go to state 4
    escrever        shift and go to state 5

    Z                              shift and go to state 1
    LstV                           shift and go to state 2
    V                              shift and go to state 3

state 1

    (0) S' -> Z .



state 2

    (1) Z -> LstV . ;
    (3) LstV -> LstV . ; V

    ;               shift and go to state 6


state 3

    (2) LstV -> V .

    ;               reduce using rule 2 (LstV -> V .)


state 4

    (4) V -> id . = map ( id , Lista )
    (5) V -> id . = fold ( id , Lista , numInt )
    (6) V -> id . = E
    (7) V -> id . = Lista

    =               shift and go to state 7


state 5

    (15) V -> escrever . ( Texto )

    (               shift and go to state 8


state 6

    (1) Z -> LstV ; .
    (3) LstV -> LstV ; . V
    (4) V -> . id = map ( id , Lista )
    (5) V -> . id = fold ( id , Lista , numInt )
    (6) V -> . id = E
    (7) V -> . id = Lista
    (15) V -> . escrever ( Texto )

    $end            reduce using rule 1 (Z -> LstV ; .)
    id              shift and go to state 4
    escrever        shift and go to state 5

    V                              shift and go to state 9

state 7

    (4) V -> id = . map ( id , Lista )
    (5) V -> id = . fold ( id , Lista , numInt )
    (6) V -> id = . E
    (7) V -> id = . Lista
    (16) E -> . E + T
    (17) E -> . E - T
    (18) E -> . T
    (8) Lista -> . [ ListIn ]
    (19) T -> . T / F
    (20) T -> . T * F
    (21) T -> . F
    (22) F -> . ( E )
    (23) F -> . numInt
    (24) F -> . numF
    (25) F -> . id
    (26) F -> . id [ numInt ]
    (27) F -> . aleatorio ( numInt )

    map             shift and go to state 11
    fold            shift and go to state 14
    [               shift and go to state 18
    (               shift and go to state 12
    numInt          shift and go to state 15
    numF            shift and go to state 20
    id              shift and go to state 10
    aleatorio       shift and go to state 21

    Lista                          shift and go to state 13
    E                              shift and go to state 16
    T                              shift and go to state 17
    F                              shift and go to state 19

state 8

    (15) V -> escrever ( . Texto )
    (11) Texto -> . texto
    (12) Texto -> . id
    (13) Texto -> . id [ numInt ]
    (14) Texto -> . Texto < > Texto

    texto           shift and go to state 23
    id              shift and go to state 24

    Texto                          shift and go to state 22

state 9

    (3) LstV -> LstV ; V .

    ;               reduce using rule 3 (LstV -> LstV ; V .)


state 10

    (25) F -> id .
    (26) F -> id . [ numInt ]

    /               reduce using rule 25 (F -> id .)
    *               reduce using rule 25 (F -> id .)
    +               reduce using rule 25 (F -> id .)
    -               reduce using rule 25 (F -> id .)
    ;               reduce using rule 25 (F -> id .)
    )               reduce using rule 25 (F -> id .)
    [               shift and go to state 25


state 11

    (4) V -> id = map . ( id , Lista )

    (               shift and go to state 26


state 12

    (22) F -> ( . E )
    (16) E -> . E + T
    (17) E -> . E - T
    (18) E -> . T
    (19) T -> . T / F
    (20) T -> . T * F
    (21) T -> . F
    (22) F -> . ( E )
    (23) F -> . numInt
    (24) F -> . numF
    (25) F -> . id
    (26) F -> . id [ numInt ]
    (27) F -> . aleatorio ( numInt )

    (               shift and go to state 12
    numInt          shift and go to state 15
    numF            shift and go to state 20
    id              shift and go to state 10
    aleatorio       shift and go to state 21

    E                              shift and go to state 27
    T                              shift and go to state 17
    F                              shift and go to state 19

state 13

    (7) V -> id = Lista .

    ;               reduce using rule 7 (V -> id = Lista .)


state 14

    (5) V -> id = fold . ( id , Lista , numInt )

    (               shift and go to state 28


state 15

    (23) F -> numInt .

    /               reduce using rule 23 (F -> numInt .)
    *               reduce using rule 23 (F -> numInt .)
    +               reduce using rule 23 (F -> numInt .)
    -               reduce using rule 23 (F -> numInt .)
    ;               reduce using rule 23 (F -> numInt .)
    )               reduce using rule 23 (F -> numInt .)


state 16

    (6) V -> id = E .
    (16) E -> E . + T
    (17) E -> E . - T

    ;               reduce using rule 6 (V -> id = E .)
    +               shift and go to state 29
    -               shift and go to state 30


state 17

    (18) E -> T .
    (19) T -> T . / F
    (20) T -> T . * F

    +               reduce using rule 18 (E -> T .)
    -               reduce using rule 18 (E -> T .)
    ;               reduce using rule 18 (E -> T .)
    )               reduce using rule 18 (E -> T .)
    /               shift and go to state 31
    *               shift and go to state 32


state 18

    (8) Lista -> [ . ListIn ]
    (9) ListIn -> . numInt , ListIn
    (10) ListIn -> . numInt

    numInt          shift and go to state 34

    ListIn                         shift and go to state 33

state 19

    (21) T -> F .

    /               reduce using rule 21 (T -> F .)
    *               reduce using rule 21 (T -> F .)
    +               reduce using rule 21 (T -> F .)
    -               reduce using rule 21 (T -> F .)
    ;               reduce using rule 21 (T -> F .)
    )               reduce using rule 21 (T -> F .)


state 20

    (24) F -> numF .

    /               reduce using rule 24 (F -> numF .)
    *               reduce using rule 24 (F -> numF .)
    +               reduce using rule 24 (F -> numF .)
    -               reduce using rule 24 (F -> numF .)
    ;               reduce using rule 24 (F -> numF .)
    )               reduce using rule 24 (F -> numF .)


state 21

    (27) F -> aleatorio . ( numInt )

    (               shift and go to state 35


state 22

    (15) V -> escrever ( Texto . )
    (14) Texto -> Texto . < > Texto

    )               shift and go to state 36
    <               shift and go to state 37


state 23

    (11) Texto -> texto .

    )               reduce using rule 11 (Texto -> texto .)
    <               reduce using rule 11 (Texto -> texto .)


state 24

    (12) Texto -> id .
    (13) Texto -> id . [ numInt ]

    )               reduce using rule 12 (Texto -> id .)
    <               reduce using rule 12 (Texto -> id .)
    [               shift and go to state 38


state 25

    (26) F -> id [ . numInt ]

    numInt          shift and go to state 39


state 26

    (4) V -> id = map ( . id , Lista )

    id              shift and go to state 40


state 27

    (22) F -> ( E . )
    (16) E -> E . + T
    (17) E -> E . - T

    )               shift and go to state 41
    +               shift and go to state 29
    -               shift and go to state 30


state 28

    (5) V -> id = fold ( . id , Lista , numInt )

    id              shift and go to state 42


state 29

    (16) E -> E + . T
    (19) T -> . T / F
    (20) T -> . T * F
    (21) T -> . F
    (22) F -> . ( E )
    (23) F -> . numInt
    (24) F -> . numF
    (25) F -> . id
    (26) F -> . id [ numInt ]
    (27) F -> . aleatorio ( numInt )

    (               shift and go to state 12
    numInt          shift and go to state 15
    numF            shift and go to state 20
    id              shift and go to state 10
    aleatorio       shift and go to state 21

    T                              shift and go to state 43
    F                              shift and go to state 19

state 30

    (17) E -> E - . T
    (19) T -> . T / F
    (20) T -> . T * F
    (21) T -> . F
    (22) F -> . ( E )
    (23) F -> . numInt
    (24) F -> . numF
    (25) F -> . id
    (26) F -> . id [ numInt ]
    (27) F -> . aleatorio ( numInt )

    (               shift and go to state 12
    numInt          shift and go to state 15
    numF            shift and go to state 20
    id              shift and go to state 10
    aleatorio       shift and go to state 21

    T                              shift and go to state 44
    F                              shift and go to state 19

state 31

    (19) T -> T / . F
    (22) F -> . ( E )
    (23) F -> . numInt
    (24) F -> . numF
    (25) F -> . id
    (26) F -> . id [ numInt ]
    (27) F -> . aleatorio ( numInt )

    (               shift and go to state 12
    numInt          shift and go to state 15
    numF            shift and go to state 20
    id              shift and go to state 10
    aleatorio       shift and go to state 21

    F                              shift and go to state 45

state 32

    (20) T -> T * . F
    (22) F -> . ( E )
    (23) F -> . numInt
    (24) F -> . numF
    (25) F -> . id
    (26) F -> . id [ numInt ]
    (27) F -> . aleatorio ( numInt )

    (               shift and go to state 12
    numInt          shift and go to state 15
    numF            shift and go to state 20
    id              shift and go to state 10
    aleatorio       shift and go to state 21

    F                              shift and go to state 46

state 33

    (8) Lista -> [ ListIn . ]

    ]               shift and go to state 47


state 34

    (9) ListIn -> numInt . , ListIn
    (10) ListIn -> numInt .

    ,               shift and go to state 48
    ]               reduce using rule 10 (ListIn -> numInt .)


state 35

    (27) F -> aleatorio ( . numInt )

    numInt          shift and go to state 49


state 36

    (15) V -> escrever ( Texto ) .

    ;               reduce using rule 15 (V -> escrever ( Texto ) .)


state 37

    (14) Texto -> Texto < . > Texto

    >               shift and go to state 50


state 38

    (13) Texto -> id [ . numInt ]

    numInt          shift and go to state 51


state 39

    (26) F -> id [ numInt . ]

    ]               shift and go to state 52


state 40

    (4) V -> id = map ( id . , Lista )

    ,               shift and go to state 53


state 41

    (22) F -> ( E ) .

    /               reduce using rule 22 (F -> ( E ) .)
    *               reduce using rule 22 (F -> ( E ) .)
    +               reduce using rule 22 (F -> ( E ) .)
    -               reduce using rule 22 (F -> ( E ) .)
    ;               reduce using rule 22 (F -> ( E ) .)
    )               reduce using rule 22 (F -> ( E ) .)


state 42

    (5) V -> id = fold ( id . , Lista , numInt )

    ,               shift and go to state 54


state 43

    (16) E -> E + T .
    (19) T -> T . / F
    (20) T -> T . * F

    +               reduce using rule 16 (E -> E + T .)
    -               reduce using rule 16 (E -> E + T .)
    ;               reduce using rule 16 (E -> E + T .)
    )               reduce using rule 16 (E -> E + T .)
    /               shift and go to state 31
    *               shift and go to state 32


state 44

    (17) E -> E - T .
    (19) T -> T . / F
    (20) T -> T . * F

    +               reduce using rule 17 (E -> E - T .)
    -               reduce using rule 17 (E -> E - T .)
    ;               reduce using rule 17 (E -> E - T .)
    )               reduce using rule 17 (E -> E - T .)
    /               shift and go to state 31
    *               shift and go to state 32


state 45

    (19) T -> T / F .

    /               reduce using rule 19 (T -> T / F .)
    *               reduce using rule 19 (T -> T / F .)
    +               reduce using rule 19 (T -> T / F .)
    -               reduce using rule 19 (T -> T / F .)
    ;               reduce using rule 19 (T -> T / F .)
    )               reduce using rule 19 (T -> T / F .)


state 46

    (20) T -> T * F .

    /               reduce using rule 20 (T -> T * F .)
    *               reduce using rule 20 (T -> T * F .)
    +               reduce using rule 20 (T -> T * F .)
    -               reduce using rule 20 (T -> T * F .)
    ;               reduce using rule 20 (T -> T * F .)
    )               reduce using rule 20 (T -> T * F .)


state 47

    (8) Lista -> [ ListIn ] .

    ;               reduce using rule 8 (Lista -> [ ListIn ] .)
    )               reduce using rule 8 (Lista -> [ ListIn ] .)
    ,               reduce using rule 8 (Lista -> [ ListIn ] .)


state 48

    (9) ListIn -> numInt , . ListIn
    (9) ListIn -> . numInt , ListIn
    (10) ListIn -> . numInt

    numInt          shift and go to state 34

    ListIn                         shift and go to state 55

state 49

    (27) F -> aleatorio ( numInt . )

    )               shift and go to state 56


state 50

    (14) Texto -> Texto < > . Texto
    (11) Texto -> . texto
    (12) Texto -> . id
    (13) Texto -> . id [ numInt ]
    (14) Texto -> . Texto < > Texto

    texto           shift and go to state 23
    id              shift and go to state 24

    Texto                          shift and go to state 57

state 51

    (13) Texto -> id [ numInt . ]

    ]               shift and go to state 58


state 52

    (26) F -> id [ numInt ] .

    /               reduce using rule 26 (F -> id [ numInt ] .)
    *               reduce using rule 26 (F -> id [ numInt ] .)
    +               reduce using rule 26 (F -> id [ numInt ] .)
    -               reduce using rule 26 (F -> id [ numInt ] .)
    ;               reduce using rule 26 (F -> id [ numInt ] .)
    )               reduce using rule 26 (F -> id [ numInt ] .)


state 53

    (4) V -> id = map ( id , . Lista )
    (8) Lista -> . [ ListIn ]

    [               shift and go to state 18

    Lista                          shift and go to state 59

state 54

    (5) V -> id = fold ( id , . Lista , numInt )
    (8) Lista -> . [ ListIn ]

    [               shift and go to state 18

    Lista                          shift and go to state 60

state 55

    (9) ListIn -> numInt , ListIn .

    ]               reduce using rule 9 (ListIn -> numInt , ListIn .)


state 56

    (27) F -> aleatorio ( numInt ) .

    /               reduce using rule 27 (F -> aleatorio ( numInt ) .)
    *               reduce using rule 27 (F -> aleatorio ( numInt ) .)
    +               reduce using rule 27 (F -> aleatorio ( numInt ) .)
    -               reduce using rule 27 (F -> aleatorio ( numInt ) .)
    ;               reduce using rule 27 (F -> aleatorio ( numInt ) .)
    )               reduce using rule 27 (F -> aleatorio ( numInt ) .)


state 57

    (14) Texto -> Texto < > Texto .
    (14) Texto -> Texto . < > Texto

  ! shift/reduce conflict for < resolved as shift
    )               reduce using rule 14 (Texto -> Texto < > Texto .)
    <               shift and go to state 37

  ! <               [ reduce using rule 14 (Texto -> Texto < > Texto .) ]


state 58

    (13) Texto -> id [ numInt ] .

    )               reduce using rule 13 (Texto -> id [ numInt ] .)
    <               reduce using rule 13 (Texto -> id [ numInt ] .)


state 59

    (4) V -> id = map ( id , Lista . )

    )               shift and go to state 61


state 60

    (5) V -> id = fold ( id , Lista . , numInt )

    ,               shift and go to state 62


state 61

    (4) V -> id = map ( id , Lista ) .

    ;               reduce using rule 4 (V -> id = map ( id , Lista ) .)


state 62

    (5) V -> id = fold ( id , Lista , . numInt )

    numInt          shift and go to state 63


state 63

    (5) V -> id = fold ( id , Lista , numInt . )

    )               shift and go to state 64


state 64

    (5) V -> id = fold ( id , Lista , numInt ) .

    ;               reduce using rule 5 (V -> id = fold ( id , Lista , numInt ) .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for < in state 57 resolved as shift
