Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    comentarioMult
    comentarioOne
    fim
    fold
    funcao
    map

Grammar

Rule 0     S' -> Z
Rule 1     Z -> LstV ;
Rule 2     LstV -> V
Rule 3     LstV -> LstV ; V
Rule 4     V -> id = E
Rule 5     V -> id = Lista
Rule 6     Lista -> [ ListIn ]
Rule 7     ListIn -> numInt , ListIn
Rule 8     ListIn -> numInt
Rule 9     Texto -> texto
Rule 10    Texto -> id
Rule 11    Texto -> id [ numInt ]
Rule 12    Texto -> Texto < > Texto
Rule 13    V -> escrever ( Texto )
Rule 14    V -> id = entrada ( )
Rule 15    E -> E + T
Rule 16    E -> E - T
Rule 17    E -> T
Rule 18    T -> T / F
Rule 19    T -> T * F
Rule 20    T -> F
Rule 21    F -> ( E )
Rule 22    F -> numInt
Rule 23    F -> numF
Rule 24    F -> id
Rule 25    F -> id [ numInt ]
Rule 26    F -> aleatorio ( numInt )

Terminals, with rules where they appear

(                    : 13 14 21 26
)                    : 13 14 21 26
*                    : 19
+                    : 15
,                    : 7
-                    : 16
/                    : 18
;                    : 1 3
<                    : 12
=                    : 4 5 14
>                    : 12
[                    : 6 11 25
]                    : 6 11 25
aleatorio            : 26
comentarioMult       : 
comentarioOne        : 
entrada              : 14
error                : 
escrever             : 13
fim                  : 
fold                 : 
funcao               : 
id                   : 4 5 10 11 14 24 25
map                  : 
numF                 : 23
numInt               : 7 8 11 22 25 26
texto                : 9

Nonterminals, with rules where they appear

E                    : 4 15 16 21
F                    : 18 19 20
ListIn               : 6 7
Lista                : 5
LstV                 : 1 3
T                    : 15 16 17 18 19
Texto                : 12 12 13
V                    : 2 3
Z                    : 0

Parsing method: LALR

state 0

    (0) S' -> . Z
    (1) Z -> . LstV ;
    (2) LstV -> . V
    (3) LstV -> . LstV ; V
    (4) V -> . id = E
    (5) V -> . id = Lista
    (13) V -> . escrever ( Texto )
    (14) V -> . id = entrada ( )

    id              shift and go to state 4
    escrever        shift and go to state 5

    Z                              shift and go to state 1
    LstV                           shift and go to state 2
    V                              shift and go to state 3

state 1

    (0) S' -> Z .



state 2

    (1) Z -> LstV . ;
    (3) LstV -> LstV . ; V

    ;               shift and go to state 6


state 3

    (2) LstV -> V .

    ;               reduce using rule 2 (LstV -> V .)


state 4

    (4) V -> id . = E
    (5) V -> id . = Lista
    (14) V -> id . = entrada ( )

    =               shift and go to state 7


state 5

    (13) V -> escrever . ( Texto )

    (               shift and go to state 8


state 6

    (1) Z -> LstV ; .
    (3) LstV -> LstV ; . V
    (4) V -> . id = E
    (5) V -> . id = Lista
    (13) V -> . escrever ( Texto )
    (14) V -> . id = entrada ( )

    $end            reduce using rule 1 (Z -> LstV ; .)
    id              shift and go to state 4
    escrever        shift and go to state 5

    V                              shift and go to state 9

state 7

    (4) V -> id = . E
    (5) V -> id = . Lista
    (14) V -> id = . entrada ( )
    (15) E -> . E + T
    (16) E -> . E - T
    (17) E -> . T
    (6) Lista -> . [ ListIn ]
    (18) T -> . T / F
    (19) T -> . T * F
    (20) T -> . F
    (21) F -> . ( E )
    (22) F -> . numInt
    (23) F -> . numF
    (24) F -> . id
    (25) F -> . id [ numInt ]
    (26) F -> . aleatorio ( numInt )

    entrada         shift and go to state 13
    [               shift and go to state 16
    (               shift and go to state 14
    numInt          shift and go to state 18
    numF            shift and go to state 19
    id              shift and go to state 10
    aleatorio       shift and go to state 20

    E                              shift and go to state 11
    Lista                          shift and go to state 12
    T                              shift and go to state 15
    F                              shift and go to state 17

state 8

    (13) V -> escrever ( . Texto )
    (9) Texto -> . texto
    (10) Texto -> . id
    (11) Texto -> . id [ numInt ]
    (12) Texto -> . Texto < > Texto

    texto           shift and go to state 22
    id              shift and go to state 23

    Texto                          shift and go to state 21

state 9

    (3) LstV -> LstV ; V .

    ;               reduce using rule 3 (LstV -> LstV ; V .)


state 10

    (24) F -> id .
    (25) F -> id . [ numInt ]

    /               reduce using rule 24 (F -> id .)
    *               reduce using rule 24 (F -> id .)
    +               reduce using rule 24 (F -> id .)
    -               reduce using rule 24 (F -> id .)
    ;               reduce using rule 24 (F -> id .)
    )               reduce using rule 24 (F -> id .)
    [               shift and go to state 24


state 11

    (4) V -> id = E .
    (15) E -> E . + T
    (16) E -> E . - T

    ;               reduce using rule 4 (V -> id = E .)
    +               shift and go to state 25
    -               shift and go to state 26


state 12

    (5) V -> id = Lista .

    ;               reduce using rule 5 (V -> id = Lista .)


state 13

    (14) V -> id = entrada . ( )

    (               shift and go to state 27


state 14

    (21) F -> ( . E )
    (15) E -> . E + T
    (16) E -> . E - T
    (17) E -> . T
    (18) T -> . T / F
    (19) T -> . T * F
    (20) T -> . F
    (21) F -> . ( E )
    (22) F -> . numInt
    (23) F -> . numF
    (24) F -> . id
    (25) F -> . id [ numInt ]
    (26) F -> . aleatorio ( numInt )

    (               shift and go to state 14
    numInt          shift and go to state 18
    numF            shift and go to state 19
    id              shift and go to state 10
    aleatorio       shift and go to state 20

    E                              shift and go to state 28
    T                              shift and go to state 15
    F                              shift and go to state 17

state 15

    (17) E -> T .
    (18) T -> T . / F
    (19) T -> T . * F

    +               reduce using rule 17 (E -> T .)
    -               reduce using rule 17 (E -> T .)
    ;               reduce using rule 17 (E -> T .)
    )               reduce using rule 17 (E -> T .)
    /               shift and go to state 29
    *               shift and go to state 30


state 16

    (6) Lista -> [ . ListIn ]
    (7) ListIn -> . numInt , ListIn
    (8) ListIn -> . numInt

    numInt          shift and go to state 32

    ListIn                         shift and go to state 31

state 17

    (20) T -> F .

    /               reduce using rule 20 (T -> F .)
    *               reduce using rule 20 (T -> F .)
    +               reduce using rule 20 (T -> F .)
    -               reduce using rule 20 (T -> F .)
    ;               reduce using rule 20 (T -> F .)
    )               reduce using rule 20 (T -> F .)


state 18

    (22) F -> numInt .

    /               reduce using rule 22 (F -> numInt .)
    *               reduce using rule 22 (F -> numInt .)
    +               reduce using rule 22 (F -> numInt .)
    -               reduce using rule 22 (F -> numInt .)
    ;               reduce using rule 22 (F -> numInt .)
    )               reduce using rule 22 (F -> numInt .)


state 19

    (23) F -> numF .

    /               reduce using rule 23 (F -> numF .)
    *               reduce using rule 23 (F -> numF .)
    +               reduce using rule 23 (F -> numF .)
    -               reduce using rule 23 (F -> numF .)
    ;               reduce using rule 23 (F -> numF .)
    )               reduce using rule 23 (F -> numF .)


state 20

    (26) F -> aleatorio . ( numInt )

    (               shift and go to state 33


state 21

    (13) V -> escrever ( Texto . )
    (12) Texto -> Texto . < > Texto

    )               shift and go to state 34
    <               shift and go to state 35


state 22

    (9) Texto -> texto .

    )               reduce using rule 9 (Texto -> texto .)
    <               reduce using rule 9 (Texto -> texto .)


state 23

    (10) Texto -> id .
    (11) Texto -> id . [ numInt ]

    )               reduce using rule 10 (Texto -> id .)
    <               reduce using rule 10 (Texto -> id .)
    [               shift and go to state 36


state 24

    (25) F -> id [ . numInt ]

    numInt          shift and go to state 37


state 25

    (15) E -> E + . T
    (18) T -> . T / F
    (19) T -> . T * F
    (20) T -> . F
    (21) F -> . ( E )
    (22) F -> . numInt
    (23) F -> . numF
    (24) F -> . id
    (25) F -> . id [ numInt ]
    (26) F -> . aleatorio ( numInt )

    (               shift and go to state 14
    numInt          shift and go to state 18
    numF            shift and go to state 19
    id              shift and go to state 10
    aleatorio       shift and go to state 20

    T                              shift and go to state 38
    F                              shift and go to state 17

state 26

    (16) E -> E - . T
    (18) T -> . T / F
    (19) T -> . T * F
    (20) T -> . F
    (21) F -> . ( E )
    (22) F -> . numInt
    (23) F -> . numF
    (24) F -> . id
    (25) F -> . id [ numInt ]
    (26) F -> . aleatorio ( numInt )

    (               shift and go to state 14
    numInt          shift and go to state 18
    numF            shift and go to state 19
    id              shift and go to state 10
    aleatorio       shift and go to state 20

    T                              shift and go to state 39
    F                              shift and go to state 17

state 27

    (14) V -> id = entrada ( . )

    )               shift and go to state 40


state 28

    (21) F -> ( E . )
    (15) E -> E . + T
    (16) E -> E . - T

    )               shift and go to state 41
    +               shift and go to state 25
    -               shift and go to state 26


state 29

    (18) T -> T / . F
    (21) F -> . ( E )
    (22) F -> . numInt
    (23) F -> . numF
    (24) F -> . id
    (25) F -> . id [ numInt ]
    (26) F -> . aleatorio ( numInt )

    (               shift and go to state 14
    numInt          shift and go to state 18
    numF            shift and go to state 19
    id              shift and go to state 10
    aleatorio       shift and go to state 20

    F                              shift and go to state 42

state 30

    (19) T -> T * . F
    (21) F -> . ( E )
    (22) F -> . numInt
    (23) F -> . numF
    (24) F -> . id
    (25) F -> . id [ numInt ]
    (26) F -> . aleatorio ( numInt )

    (               shift and go to state 14
    numInt          shift and go to state 18
    numF            shift and go to state 19
    id              shift and go to state 10
    aleatorio       shift and go to state 20

    F                              shift and go to state 43

state 31

    (6) Lista -> [ ListIn . ]

    ]               shift and go to state 44


state 32

    (7) ListIn -> numInt . , ListIn
    (8) ListIn -> numInt .

    ,               shift and go to state 45
    ]               reduce using rule 8 (ListIn -> numInt .)


state 33

    (26) F -> aleatorio ( . numInt )

    numInt          shift and go to state 46


state 34

    (13) V -> escrever ( Texto ) .

    ;               reduce using rule 13 (V -> escrever ( Texto ) .)


state 35

    (12) Texto -> Texto < . > Texto

    >               shift and go to state 47


state 36

    (11) Texto -> id [ . numInt ]

    numInt          shift and go to state 48


state 37

    (25) F -> id [ numInt . ]

    ]               shift and go to state 49


state 38

    (15) E -> E + T .
    (18) T -> T . / F
    (19) T -> T . * F

    +               reduce using rule 15 (E -> E + T .)
    -               reduce using rule 15 (E -> E + T .)
    ;               reduce using rule 15 (E -> E + T .)
    )               reduce using rule 15 (E -> E + T .)
    /               shift and go to state 29
    *               shift and go to state 30


state 39

    (16) E -> E - T .
    (18) T -> T . / F
    (19) T -> T . * F

    +               reduce using rule 16 (E -> E - T .)
    -               reduce using rule 16 (E -> E - T .)
    ;               reduce using rule 16 (E -> E - T .)
    )               reduce using rule 16 (E -> E - T .)
    /               shift and go to state 29
    *               shift and go to state 30


state 40

    (14) V -> id = entrada ( ) .

    ;               reduce using rule 14 (V -> id = entrada ( ) .)


state 41

    (21) F -> ( E ) .

    /               reduce using rule 21 (F -> ( E ) .)
    *               reduce using rule 21 (F -> ( E ) .)
    +               reduce using rule 21 (F -> ( E ) .)
    -               reduce using rule 21 (F -> ( E ) .)
    ;               reduce using rule 21 (F -> ( E ) .)
    )               reduce using rule 21 (F -> ( E ) .)


state 42

    (18) T -> T / F .

    /               reduce using rule 18 (T -> T / F .)
    *               reduce using rule 18 (T -> T / F .)
    +               reduce using rule 18 (T -> T / F .)
    -               reduce using rule 18 (T -> T / F .)
    ;               reduce using rule 18 (T -> T / F .)
    )               reduce using rule 18 (T -> T / F .)


state 43

    (19) T -> T * F .

    /               reduce using rule 19 (T -> T * F .)
    *               reduce using rule 19 (T -> T * F .)
    +               reduce using rule 19 (T -> T * F .)
    -               reduce using rule 19 (T -> T * F .)
    ;               reduce using rule 19 (T -> T * F .)
    )               reduce using rule 19 (T -> T * F .)


state 44

    (6) Lista -> [ ListIn ] .

    ;               reduce using rule 6 (Lista -> [ ListIn ] .)


state 45

    (7) ListIn -> numInt , . ListIn
    (7) ListIn -> . numInt , ListIn
    (8) ListIn -> . numInt

    numInt          shift and go to state 32

    ListIn                         shift and go to state 50

state 46

    (26) F -> aleatorio ( numInt . )

    )               shift and go to state 51


state 47

    (12) Texto -> Texto < > . Texto
    (9) Texto -> . texto
    (10) Texto -> . id
    (11) Texto -> . id [ numInt ]
    (12) Texto -> . Texto < > Texto

    texto           shift and go to state 22
    id              shift and go to state 23

    Texto                          shift and go to state 52

state 48

    (11) Texto -> id [ numInt . ]

    ]               shift and go to state 53


state 49

    (25) F -> id [ numInt ] .

    /               reduce using rule 25 (F -> id [ numInt ] .)
    *               reduce using rule 25 (F -> id [ numInt ] .)
    +               reduce using rule 25 (F -> id [ numInt ] .)
    -               reduce using rule 25 (F -> id [ numInt ] .)
    ;               reduce using rule 25 (F -> id [ numInt ] .)
    )               reduce using rule 25 (F -> id [ numInt ] .)


state 50

    (7) ListIn -> numInt , ListIn .

    ]               reduce using rule 7 (ListIn -> numInt , ListIn .)


state 51

    (26) F -> aleatorio ( numInt ) .

    /               reduce using rule 26 (F -> aleatorio ( numInt ) .)
    *               reduce using rule 26 (F -> aleatorio ( numInt ) .)
    +               reduce using rule 26 (F -> aleatorio ( numInt ) .)
    -               reduce using rule 26 (F -> aleatorio ( numInt ) .)
    ;               reduce using rule 26 (F -> aleatorio ( numInt ) .)
    )               reduce using rule 26 (F -> aleatorio ( numInt ) .)


state 52

    (12) Texto -> Texto < > Texto .
    (12) Texto -> Texto . < > Texto

  ! shift/reduce conflict for < resolved as shift
    )               reduce using rule 12 (Texto -> Texto < > Texto .)
    <               shift and go to state 35

  ! <               [ reduce using rule 12 (Texto -> Texto < > Texto .) ]


state 53

    (11) Texto -> id [ numInt ] .

    )               reduce using rule 11 (Texto -> id [ numInt ] .)
    <               reduce using rule 11 (Texto -> id [ numInt ] .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for < in state 52 resolved as shift
