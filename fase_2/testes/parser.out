Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    comentarioMult
    comentarioOne
    fim
    funcao

Grammar

Rule 0     S' -> Z
Rule 1     Z -> LstV ;
Rule 2     LstV -> V
Rule 3     LstV -> LstV ; V
Rule 4     V -> id = map ( id , Lista )
Rule 5     V -> id = fold ( id , Lista , numInt )
Rule 6     V -> id = E
Rule 7     V -> id = Lista
Rule 8     Lista -> [ ListIn ]
Rule 9     ListIn -> numInt , ListIn
Rule 10    ListIn -> numInt
Rule 11    Texto -> texto
Rule 12    Texto -> id
Rule 13    Texto -> id [ numInt ]
Rule 14    Texto -> Texto < > Texto
Rule 15    V -> escrever ( Texto )
Rule 16    V -> id = entrada ( )
Rule 17    E -> E + T
Rule 18    E -> E - T
Rule 19    E -> T
Rule 20    T -> T / F
Rule 21    T -> T * F
Rule 22    T -> F
Rule 23    F -> ( E )
Rule 24    F -> numInt
Rule 25    F -> numF
Rule 26    F -> id
Rule 27    F -> id [ numInt ]
Rule 28    F -> aleatorio ( numInt )

Terminals, with rules where they appear

(                    : 4 5 15 16 23 28
)                    : 4 5 15 16 23 28
*                    : 21
+                    : 17
,                    : 4 5 5 9
-                    : 18
/                    : 20
;                    : 1 3
<                    : 14
=                    : 4 5 6 7 16
>                    : 14
[                    : 8 13 27
]                    : 8 13 27
aleatorio            : 28
comentarioMult       : 
comentarioOne        : 
entrada              : 16
error                : 
escrever             : 15
fim                  : 
fold                 : 5
funcao               : 
id                   : 4 4 5 5 6 7 12 13 16 26 27
map                  : 4
numF                 : 25
numInt               : 5 9 10 13 24 27 28
texto                : 11

Nonterminals, with rules where they appear

E                    : 6 17 18 23
F                    : 20 21 22
ListIn               : 8 9
Lista                : 4 5 7
LstV                 : 1 3
T                    : 17 18 19 20 21
Texto                : 14 14 15
V                    : 2 3
Z                    : 0

Parsing method: LALR

state 0

    (0) S' -> . Z
    (1) Z -> . LstV ;
    (2) LstV -> . V
    (3) LstV -> . LstV ; V
    (4) V -> . id = map ( id , Lista )
    (5) V -> . id = fold ( id , Lista , numInt )
    (6) V -> . id = E
    (7) V -> . id = Lista
    (15) V -> . escrever ( Texto )
    (16) V -> . id = entrada ( )

    id              shift and go to state 4
    escrever        shift and go to state 5

    Z                              shift and go to state 1
    LstV                           shift and go to state 2
    V                              shift and go to state 3

state 1

    (0) S' -> Z .



state 2

    (1) Z -> LstV . ;
    (3) LstV -> LstV . ; V

    ;               shift and go to state 6


state 3

    (2) LstV -> V .

    ;               reduce using rule 2 (LstV -> V .)


state 4

    (4) V -> id . = map ( id , Lista )
    (5) V -> id . = fold ( id , Lista , numInt )
    (6) V -> id . = E
    (7) V -> id . = Lista
    (16) V -> id . = entrada ( )

    =               shift and go to state 7


state 5

    (15) V -> escrever . ( Texto )

    (               shift and go to state 8


state 6

    (1) Z -> LstV ; .
    (3) LstV -> LstV ; . V
    (4) V -> . id = map ( id , Lista )
    (5) V -> . id = fold ( id , Lista , numInt )
    (6) V -> . id = E
    (7) V -> . id = Lista
    (15) V -> . escrever ( Texto )
    (16) V -> . id = entrada ( )

    $end            reduce using rule 1 (Z -> LstV ; .)
    id              shift and go to state 4
    escrever        shift and go to state 5

    V                              shift and go to state 9

state 7

    (4) V -> id = . map ( id , Lista )
    (5) V -> id = . fold ( id , Lista , numInt )
    (6) V -> id = . E
    (7) V -> id = . Lista
    (16) V -> id = . entrada ( )
    (17) E -> . E + T
    (18) E -> . E - T
    (19) E -> . T
    (8) Lista -> . [ ListIn ]
    (20) T -> . T / F
    (21) T -> . T * F
    (22) T -> . F
    (23) F -> . ( E )
    (24) F -> . numInt
    (25) F -> . numF
    (26) F -> . id
    (27) F -> . id [ numInt ]
    (28) F -> . aleatorio ( numInt )

    map             shift and go to state 11
    fold            shift and go to state 14
    entrada         shift and go to state 17
    [               shift and go to state 19
    (               shift and go to state 12
    numInt          shift and go to state 15
    numF            shift and go to state 21
    id              shift and go to state 10
    aleatorio       shift and go to state 22

    Lista                          shift and go to state 13
    E                              shift and go to state 16
    T                              shift and go to state 18
    F                              shift and go to state 20

state 8

    (15) V -> escrever ( . Texto )
    (11) Texto -> . texto
    (12) Texto -> . id
    (13) Texto -> . id [ numInt ]
    (14) Texto -> . Texto < > Texto

    texto           shift and go to state 24
    id              shift and go to state 25

    Texto                          shift and go to state 23

state 9

    (3) LstV -> LstV ; V .

    ;               reduce using rule 3 (LstV -> LstV ; V .)


state 10

    (26) F -> id .
    (27) F -> id . [ numInt ]

    /               reduce using rule 26 (F -> id .)
    *               reduce using rule 26 (F -> id .)
    +               reduce using rule 26 (F -> id .)
    -               reduce using rule 26 (F -> id .)
    ;               reduce using rule 26 (F -> id .)
    )               reduce using rule 26 (F -> id .)
    [               shift and go to state 26


state 11

    (4) V -> id = map . ( id , Lista )

    (               shift and go to state 27


state 12

    (23) F -> ( . E )
    (17) E -> . E + T
    (18) E -> . E - T
    (19) E -> . T
    (20) T -> . T / F
    (21) T -> . T * F
    (22) T -> . F
    (23) F -> . ( E )
    (24) F -> . numInt
    (25) F -> . numF
    (26) F -> . id
    (27) F -> . id [ numInt ]
    (28) F -> . aleatorio ( numInt )

    (               shift and go to state 12
    numInt          shift and go to state 15
    numF            shift and go to state 21
    id              shift and go to state 10
    aleatorio       shift and go to state 22

    E                              shift and go to state 28
    T                              shift and go to state 18
    F                              shift and go to state 20

state 13

    (7) V -> id = Lista .

    ;               reduce using rule 7 (V -> id = Lista .)


state 14

    (5) V -> id = fold . ( id , Lista , numInt )

    (               shift and go to state 29


state 15

    (24) F -> numInt .

    /               reduce using rule 24 (F -> numInt .)
    *               reduce using rule 24 (F -> numInt .)
    +               reduce using rule 24 (F -> numInt .)
    -               reduce using rule 24 (F -> numInt .)
    ;               reduce using rule 24 (F -> numInt .)
    )               reduce using rule 24 (F -> numInt .)


state 16

    (6) V -> id = E .
    (17) E -> E . + T
    (18) E -> E . - T

    ;               reduce using rule 6 (V -> id = E .)
    +               shift and go to state 30
    -               shift and go to state 31


state 17

    (16) V -> id = entrada . ( )

    (               shift and go to state 32


state 18

    (19) E -> T .
    (20) T -> T . / F
    (21) T -> T . * F

    +               reduce using rule 19 (E -> T .)
    -               reduce using rule 19 (E -> T .)
    ;               reduce using rule 19 (E -> T .)
    )               reduce using rule 19 (E -> T .)
    /               shift and go to state 33
    *               shift and go to state 34


state 19

    (8) Lista -> [ . ListIn ]
    (9) ListIn -> . numInt , ListIn
    (10) ListIn -> . numInt

    numInt          shift and go to state 36

    ListIn                         shift and go to state 35

state 20

    (22) T -> F .

    /               reduce using rule 22 (T -> F .)
    *               reduce using rule 22 (T -> F .)
    +               reduce using rule 22 (T -> F .)
    -               reduce using rule 22 (T -> F .)
    ;               reduce using rule 22 (T -> F .)
    )               reduce using rule 22 (T -> F .)


state 21

    (25) F -> numF .

    /               reduce using rule 25 (F -> numF .)
    *               reduce using rule 25 (F -> numF .)
    +               reduce using rule 25 (F -> numF .)
    -               reduce using rule 25 (F -> numF .)
    ;               reduce using rule 25 (F -> numF .)
    )               reduce using rule 25 (F -> numF .)


state 22

    (28) F -> aleatorio . ( numInt )

    (               shift and go to state 37


state 23

    (15) V -> escrever ( Texto . )
    (14) Texto -> Texto . < > Texto

    )               shift and go to state 38
    <               shift and go to state 39


state 24

    (11) Texto -> texto .

    )               reduce using rule 11 (Texto -> texto .)
    <               reduce using rule 11 (Texto -> texto .)


state 25

    (12) Texto -> id .
    (13) Texto -> id . [ numInt ]

    )               reduce using rule 12 (Texto -> id .)
    <               reduce using rule 12 (Texto -> id .)
    [               shift and go to state 40


state 26

    (27) F -> id [ . numInt ]

    numInt          shift and go to state 41


state 27

    (4) V -> id = map ( . id , Lista )

    id              shift and go to state 42


state 28

    (23) F -> ( E . )
    (17) E -> E . + T
    (18) E -> E . - T

    )               shift and go to state 43
    +               shift and go to state 30
    -               shift and go to state 31


state 29

    (5) V -> id = fold ( . id , Lista , numInt )

    id              shift and go to state 44


state 30

    (17) E -> E + . T
    (20) T -> . T / F
    (21) T -> . T * F
    (22) T -> . F
    (23) F -> . ( E )
    (24) F -> . numInt
    (25) F -> . numF
    (26) F -> . id
    (27) F -> . id [ numInt ]
    (28) F -> . aleatorio ( numInt )

    (               shift and go to state 12
    numInt          shift and go to state 15
    numF            shift and go to state 21
    id              shift and go to state 10
    aleatorio       shift and go to state 22

    T                              shift and go to state 45
    F                              shift and go to state 20

state 31

    (18) E -> E - . T
    (20) T -> . T / F
    (21) T -> . T * F
    (22) T -> . F
    (23) F -> . ( E )
    (24) F -> . numInt
    (25) F -> . numF
    (26) F -> . id
    (27) F -> . id [ numInt ]
    (28) F -> . aleatorio ( numInt )

    (               shift and go to state 12
    numInt          shift and go to state 15
    numF            shift and go to state 21
    id              shift and go to state 10
    aleatorio       shift and go to state 22

    T                              shift and go to state 46
    F                              shift and go to state 20

state 32

    (16) V -> id = entrada ( . )

    )               shift and go to state 47


state 33

    (20) T -> T / . F
    (23) F -> . ( E )
    (24) F -> . numInt
    (25) F -> . numF
    (26) F -> . id
    (27) F -> . id [ numInt ]
    (28) F -> . aleatorio ( numInt )

    (               shift and go to state 12
    numInt          shift and go to state 15
    numF            shift and go to state 21
    id              shift and go to state 10
    aleatorio       shift and go to state 22

    F                              shift and go to state 48

state 34

    (21) T -> T * . F
    (23) F -> . ( E )
    (24) F -> . numInt
    (25) F -> . numF
    (26) F -> . id
    (27) F -> . id [ numInt ]
    (28) F -> . aleatorio ( numInt )

    (               shift and go to state 12
    numInt          shift and go to state 15
    numF            shift and go to state 21
    id              shift and go to state 10
    aleatorio       shift and go to state 22

    F                              shift and go to state 49

state 35

    (8) Lista -> [ ListIn . ]

    ]               shift and go to state 50


state 36

    (9) ListIn -> numInt . , ListIn
    (10) ListIn -> numInt .

    ,               shift and go to state 51
    ]               reduce using rule 10 (ListIn -> numInt .)


state 37

    (28) F -> aleatorio ( . numInt )

    numInt          shift and go to state 52


state 38

    (15) V -> escrever ( Texto ) .

    ;               reduce using rule 15 (V -> escrever ( Texto ) .)


state 39

    (14) Texto -> Texto < . > Texto

    >               shift and go to state 53


state 40

    (13) Texto -> id [ . numInt ]

    numInt          shift and go to state 54


state 41

    (27) F -> id [ numInt . ]

    ]               shift and go to state 55


state 42

    (4) V -> id = map ( id . , Lista )

    ,               shift and go to state 56


state 43

    (23) F -> ( E ) .

    /               reduce using rule 23 (F -> ( E ) .)
    *               reduce using rule 23 (F -> ( E ) .)
    +               reduce using rule 23 (F -> ( E ) .)
    -               reduce using rule 23 (F -> ( E ) .)
    ;               reduce using rule 23 (F -> ( E ) .)
    )               reduce using rule 23 (F -> ( E ) .)


state 44

    (5) V -> id = fold ( id . , Lista , numInt )

    ,               shift and go to state 57


state 45

    (17) E -> E + T .
    (20) T -> T . / F
    (21) T -> T . * F

    +               reduce using rule 17 (E -> E + T .)
    -               reduce using rule 17 (E -> E + T .)
    ;               reduce using rule 17 (E -> E + T .)
    )               reduce using rule 17 (E -> E + T .)
    /               shift and go to state 33
    *               shift and go to state 34


state 46

    (18) E -> E - T .
    (20) T -> T . / F
    (21) T -> T . * F

    +               reduce using rule 18 (E -> E - T .)
    -               reduce using rule 18 (E -> E - T .)
    ;               reduce using rule 18 (E -> E - T .)
    )               reduce using rule 18 (E -> E - T .)
    /               shift and go to state 33
    *               shift and go to state 34


state 47

    (16) V -> id = entrada ( ) .

    ;               reduce using rule 16 (V -> id = entrada ( ) .)


state 48

    (20) T -> T / F .

    /               reduce using rule 20 (T -> T / F .)
    *               reduce using rule 20 (T -> T / F .)
    +               reduce using rule 20 (T -> T / F .)
    -               reduce using rule 20 (T -> T / F .)
    ;               reduce using rule 20 (T -> T / F .)
    )               reduce using rule 20 (T -> T / F .)


state 49

    (21) T -> T * F .

    /               reduce using rule 21 (T -> T * F .)
    *               reduce using rule 21 (T -> T * F .)
    +               reduce using rule 21 (T -> T * F .)
    -               reduce using rule 21 (T -> T * F .)
    ;               reduce using rule 21 (T -> T * F .)
    )               reduce using rule 21 (T -> T * F .)


state 50

    (8) Lista -> [ ListIn ] .

    ;               reduce using rule 8 (Lista -> [ ListIn ] .)
    )               reduce using rule 8 (Lista -> [ ListIn ] .)
    ,               reduce using rule 8 (Lista -> [ ListIn ] .)


state 51

    (9) ListIn -> numInt , . ListIn
    (9) ListIn -> . numInt , ListIn
    (10) ListIn -> . numInt

    numInt          shift and go to state 36

    ListIn                         shift and go to state 58

state 52

    (28) F -> aleatorio ( numInt . )

    )               shift and go to state 59


state 53

    (14) Texto -> Texto < > . Texto
    (11) Texto -> . texto
    (12) Texto -> . id
    (13) Texto -> . id [ numInt ]
    (14) Texto -> . Texto < > Texto

    texto           shift and go to state 24
    id              shift and go to state 25

    Texto                          shift and go to state 60

state 54

    (13) Texto -> id [ numInt . ]

    ]               shift and go to state 61


state 55

    (27) F -> id [ numInt ] .

    /               reduce using rule 27 (F -> id [ numInt ] .)
    *               reduce using rule 27 (F -> id [ numInt ] .)
    +               reduce using rule 27 (F -> id [ numInt ] .)
    -               reduce using rule 27 (F -> id [ numInt ] .)
    ;               reduce using rule 27 (F -> id [ numInt ] .)
    )               reduce using rule 27 (F -> id [ numInt ] .)


state 56

    (4) V -> id = map ( id , . Lista )
    (8) Lista -> . [ ListIn ]

    [               shift and go to state 19

    Lista                          shift and go to state 62

state 57

    (5) V -> id = fold ( id , . Lista , numInt )
    (8) Lista -> . [ ListIn ]

    [               shift and go to state 19

    Lista                          shift and go to state 63

state 58

    (9) ListIn -> numInt , ListIn .

    ]               reduce using rule 9 (ListIn -> numInt , ListIn .)


state 59

    (28) F -> aleatorio ( numInt ) .

    /               reduce using rule 28 (F -> aleatorio ( numInt ) .)
    *               reduce using rule 28 (F -> aleatorio ( numInt ) .)
    +               reduce using rule 28 (F -> aleatorio ( numInt ) .)
    -               reduce using rule 28 (F -> aleatorio ( numInt ) .)
    ;               reduce using rule 28 (F -> aleatorio ( numInt ) .)
    )               reduce using rule 28 (F -> aleatorio ( numInt ) .)


state 60

    (14) Texto -> Texto < > Texto .
    (14) Texto -> Texto . < > Texto

  ! shift/reduce conflict for < resolved as shift
    )               reduce using rule 14 (Texto -> Texto < > Texto .)
    <               shift and go to state 39

  ! <               [ reduce using rule 14 (Texto -> Texto < > Texto .) ]


state 61

    (13) Texto -> id [ numInt ] .

    )               reduce using rule 13 (Texto -> id [ numInt ] .)
    <               reduce using rule 13 (Texto -> id [ numInt ] .)


state 62

    (4) V -> id = map ( id , Lista . )

    )               shift and go to state 64


state 63

    (5) V -> id = fold ( id , Lista . , numInt )

    ,               shift and go to state 65


state 64

    (4) V -> id = map ( id , Lista ) .

    ;               reduce using rule 4 (V -> id = map ( id , Lista ) .)


state 65

    (5) V -> id = fold ( id , Lista , . numInt )

    numInt          shift and go to state 66


state 66

    (5) V -> id = fold ( id , Lista , numInt . )

    )               shift and go to state 67


state 67

    (5) V -> id = fold ( id , Lista , numInt ) .

    ;               reduce using rule 5 (V -> id = fold ( id , Lista , numInt ) .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for < in state 60 resolved as shift
